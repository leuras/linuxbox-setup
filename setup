#!/bin/bash

__BASE_DIR=$(dirname "${0}")
__JSON_PACKAGES=$(cat package.json)

# import functions definition and variables
. $__BASE_DIR/lib/colors.sh
. $__BASE_DIR/lib/console.sh
. $__BASE_DIR/lib/packages.sh
. $__BASE_DIR/lib/installer.sh

summary=()

function main {
    
    install_from_ppa_packages
    install_from_binary_packages
    install_from_custom_ppa
    
    installation_summary
    installer::cleanup
}

function install_from_ppa_packages {
    local packages=($(packages::list "ppa-packages"))

    console::linebreak
    console::info "Trying to install/upgrade the following packages: ^${packages[*]}^"
    console::linebreak

    installer::install_from_apt "${packages[@]}"

    console::linebreak
    console::success "Done"   
}

function install_from_binary_packages {
    local packages=$(packages::list "binary-packages")

    console::linebreak
    console::info "Processing ^binary packages^ ..."
    
    for package in $packages; do
        console::linebreak
        console::info "Installing binary package ^${package}^"
        
        installer::install_from_archive "${package}"
    done

    console::linebreak
    console::success "Done"
}

function install_from_custom_ppa {
    local packages=$(packages::list "custom-ppa-repositories")

    console::linebreak
    console::info "Processing ^custom PPA repositories^ ..."
    console::linebreak

    for package in $packages; do
        console::info "Adding the custom PPA repository for the package ^${package}^"
        installer::add_custom_ppa "${package}"
    done

    console::linebreak
    console::info "Trying to install/upgade packages: ^${packages}^"
    installer::install_from_apt "${packages[@]}"

    console::success "Done"
}

function installation_summary {
    local packages=$(packages::executables)

    console::linebreak
    
    for package in $packages; do
        if [[ $(installer::already_installed "${package}") ]]; then
            console::success "Package ^${package}^ installed"
        else
            console::error "Package ^${package}^ not installed"
        fi
    done
}

main
exit 0
