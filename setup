#!/bin/bash

__BASE_DIR=$(dirname "${0}")
__JSON_PACKAGES=$(cat package.json)

# import functions definition and variables
. $__BASE_DIR/lib/colors.sh
. $__BASE_DIR/lib/console.sh
. $__BASE_DIR/lib/packages.sh
. $__BASE_DIR/lib/installer.sh

function main {

    install_core_packages
    
    for group in $(packages::groups); do

        console::title "Working on ${group}"

        case "${group}" in 
            "packages")
                install_packages
            ;;
            "custom-ppa-repositories")
                install_from_custom_ppa
            ;;
        esac
    done

    report
    installer::cleanup
}

function install_core_packages {
    packages=(
        wget
        curl 
        jq 
        zip 
        gdebi 
        apt-transport-https 
        ca-certificates 
        software-properties-common 
        lsb-release 
        vim 
        zsh 
    )

    console::title "Installing core packages from the oficial PPA respository"
    installer::install_from_apt "${packages[@]}"
    
    console::log "Done"
}

function install_packages {
    local packages=$(packages::list "packages")

    for package in $packages; do
        console::info "Installing ${package}"
        installer::install_from_archive "${package}"
        console::break_line
    done

    console::log "Done"
}

function install_from_custom_ppa {
    local packages=$(packages::list "custom-ppa-repositories")

    for package in $packages; do
        console::notice "Adding PPA repository for ${package}"
        installer::add_custom_ppa "${package}"
    done

    console::break_line

    console::info "Installing/Upgrading packages: ${packages}"
    installer::install_from_apt "${packages[@]}"

    console::log "Done"
}

function report {
    local result=$(packages::find_executables)

    console::header "Packages Installation Report"

    for entry in $result; do
        local package=$(echo "${entry}" | awk -F "," '{print $1}')
        local executable=$(echo "${entry}" | awk -F "," '{print $2}')
        
        [[ $(installer::already_installed "${executable}") ]] && local status="Installed" || local status="Not Installed"

        local message=$(console::pad_end "${package} " "." "35")
        console::info "${message} \e[${FG_COLOR_DARK_GRAY}m${status}"
    done

    console::break_line
}

main
